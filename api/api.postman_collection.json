{
	"info": {
		"_postman_id": "3cbe4f41-cced-4686-a82f-507a5375ce1d",
		"name": "LoyaltyBank API",
		"description": "#### An API supporting features for memberships, points, transactions and rewards.\n\nMain features:\n\n- Communities & Memberships (with tiers)\n    \n- Wallets & Payments\n    \n- Events & Event Logs\n    \n- Achievements & Rewards\n    \n- (Planned) Discounts\n    \n- (Planned) Advanced rewards campaigns\n    \n\n---\n\nA list of all the models used within the API can be found in the home page which shows the OpenAPI documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37658396"
	},
	"item": [
		{
			"name": "0 - Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"// set the auth token",
									"pm.environment.set('TOKEN', responseData.data.token);",
									"",
									"// set the email and password",
									"pm.environment.set('EMAIL', requestData.email);",
									"pm.environment.set('PASSWORD', requestData.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"username\": \"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users"
							]
						},
						"description": "User registration simply creates a record in the database representing that user with a few required fields:\n\n- `name`: string\n    \n- `email`: string (unique)\n    \n- `password`: string\n    \n- `username`: string (unique)\n    \n\n---\n\nThe response contains a `token` which is the JWT token to be used in subsequent auth protected API routes."
					},
					"response": [
						{
							"name": "Register",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"username\": \"{{$randomUserName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{API_URL}}/users",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 23 Aug 2024 13:49:08 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "cross-origin-opener-policy",
									"value": "same-origin"
								},
								{
									"key": "cross-origin-resource-policy",
									"value": "same-origin"
								},
								{
									"key": "origin-agent-cluster",
									"value": "?1"
								},
								{
									"key": "referrer-policy",
									"value": "no-referrer"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "100"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "24"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1724421323"
								},
								{
									"key": "ratelimit-policy",
									"value": "100;w=900"
								},
								{
									"key": "ratelimit-limit",
									"value": "100"
								},
								{
									"key": "ratelimit-remaining",
									"value": "24"
								},
								{
									"key": "ratelimit-reset",
									"value": "375"
								},
								{
									"key": "x-request-id",
									"value": "87839d99-54a0-4d3e-ab80-53d375b588ab"
								},
								{
									"key": "etag",
									"value": "W/\"db-g47py/l3TxdGWBAR1iECYtXcj98\""
								},
								{
									"key": "x-do-app-origin",
									"value": "ca0a640a-2844-46d6-9236-9b5ce997a682"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Set-Cookie",
									"value": "__cf_bm=K_NBFy1gEmAbDMJ9sI5cyxbyBCSpA7aiA71itvTwHiE-1724420948-1.0.1.1-AnysN.9iQC8WJDaihRHic87MBDwiJYyDQ41R.LpcBHKqmt69nz9PlzgBZQONwBu4RQ3BXI2truY.BXhtveOdIg; path=/; expires=Fri, 23-Aug-24 14:19:08 GMT; domain=.ondigitalocean.app; HttpOnly; Secure; SameSite=None"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8b7b906d4aff125e-DXB"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGVlZTM5LTJmZTMtNDUyYy1hMjVhLWM5ZGM4OThiYjEwYiIsInJvbGUiOiJVU0VSIiwiaWF0IjoxNzI0NDIwOTQ4fQ.evI4f9uAhkHLjVzHY_WDsGILZCvNYtYAktORFlEklQQ\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// set the auth token",
									"pm.environment.set('TOKEN', responseData.data.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/login",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "A login request accepts the `email` and the `password` of a user in the request body to return a `token` as returned by the registration endpoint."
					},
					"response": [
						{
							"name": "Login",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/users/login",
									"path": [
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 23 Aug 2024 16:19:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "cross-origin-opener-policy",
									"value": "same-origin"
								},
								{
									"key": "cross-origin-resource-policy",
									"value": "same-origin"
								},
								{
									"key": "origin-agent-cluster",
									"value": "?1"
								},
								{
									"key": "referrer-policy",
									"value": "no-referrer"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "100"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "99"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1724430888"
								},
								{
									"key": "ratelimit-policy",
									"value": "100;w=900"
								},
								{
									"key": "ratelimit-limit",
									"value": "100"
								},
								{
									"key": "ratelimit-remaining",
									"value": "99"
								},
								{
									"key": "ratelimit-reset",
									"value": "900"
								},
								{
									"key": "x-request-id",
									"value": "80005942-12af-46f8-aa4b-557e8efb2122"
								},
								{
									"key": "etag",
									"value": "W/\"db-F5UxTuB+DWNszIUqQnaFL4UwXSs\""
								},
								{
									"key": "x-do-app-origin",
									"value": "ca0a640a-2844-46d6-9236-9b5ce997a682"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Set-Cookie",
									"value": "__cf_bm=TbIfnaVrp9ufQv7QCTsfKpd.mv8YtzVpeohy6PTlddw-1724429987-1.0.1.1-h.Gl48LiBNXLai0rPIuei6iO2j3hXFYQ5Ss8YH7OdR1YvJC9mxCuSZGH2buibwCHgzFKeXy18jrp3bCJvcAdNA; path=/; expires=Fri, 23-Aug-24 16:49:47 GMT; domain=.ondigitalocean.app; HttpOnly; Secure; SameSite=None"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8b7c6d1adcd7b47c-DXB"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGVlZTM5LTJmZTMtNDUyYy1hMjVhLWM5ZGM4OThiYjEwYiIsInJvbGUiOiJVU0VSIiwiaWF0IjoxNzI0NDI5OTg3fQ.07_yeKoqQ3Co9kxoOXB2DIc56_iQLZjaCy4mF7sEDEU\"\n    }\n}"
						}
					]
				}
			],
			"description": "Authentication is available in 2 main methods in the API, the first is via user JWT tokens and the second is via an API key.\n\n> **NOTE**: In the case of user JWT tokens, it is included in the request as `Authorization` header in the format of `Bearer {TOKEN}.` While in the case of API Key authentication, the API key and secret are added as the `x-api-key` header, delimeted by the `:` symbol. Each API key belongs to a user by default and therefore will be making requests as that user, however, when authenticating via an API Key, an additional header `x-user-id` is allowed to override the default user which the request is representing. \n  \n\nIn all cases, the first step is to register (create) a user record in the database which can later take actions such as creating communities, joining communities, making payments and more."
		},
		{
			"name": "1 - Users",
			"item": [
				{
					"name": "All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "My Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('USER_ID', responseData.data.user.id)",
									"",
									"if (responseData.data.user?.rewards && responseData.data.user.rewards.length > 0) {",
									"    pm.environment.set('REWARD_ID', responseData.data.user.rewards[0].id)",
									"    pm.environment.set('ACHIEVMENT_ID', responseData.data.user.rewards[0].achievementId)",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/me?include[wallets]=true&include[memberships]=true&include[managedUsers]=true&include[sharedWallets]=true&include[rewards][where][claimedAt]=null",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"me"
							],
							"query": [
								{
									"key": "include[wallets]",
									"value": "true"
								},
								{
									"key": "include[memberships]",
									"value": "true"
								},
								{
									"key": "include[managedUsers]",
									"value": "true"
								},
								{
									"key": "include[sharedWallets]",
									"value": "true"
								},
								{
									"key": "include[rewards][where][claimedAt]",
									"value": "null"
								}
							]
						}
					},
					"response": [
						{
							"name": "My Info",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{API_URL}}/users/me?include[wallets]=true&include[memberships]=true&include[managedUsers]=true&include[sharedWallets]=true&include[rewards][where][claimedAt]=null",
									"host": [
										"{{API_URL}}"
									],
									"path": [
										"users",
										"me"
									],
									"query": [
										{
											"key": "include[wallets]",
											"value": "true"
										},
										{
											"key": "include[memberships]",
											"value": "true"
										},
										{
											"key": "include[managedUsers]",
											"value": "true"
										},
										{
											"key": "include[sharedWallets]",
											"value": "true"
										},
										{
											"key": "include[rewards][where][claimedAt]",
											"value": "null"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 23 Aug 2024 16:24:43 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "true"
								},
								{
									"key": "content-security-policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "cross-origin-opener-policy",
									"value": "same-origin"
								},
								{
									"key": "cross-origin-resource-policy",
									"value": "same-origin"
								},
								{
									"key": "origin-agent-cluster",
									"value": "?1"
								},
								{
									"key": "referrer-policy",
									"value": "no-referrer"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "x-permitted-cross-domain-policies",
									"value": "none"
								},
								{
									"key": "x-xss-protection",
									"value": "0"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "100"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "98"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "1724430888"
								},
								{
									"key": "ratelimit-policy",
									"value": "100;w=900"
								},
								{
									"key": "ratelimit-limit",
									"value": "100"
								},
								{
									"key": "ratelimit-remaining",
									"value": "98"
								},
								{
									"key": "ratelimit-reset",
									"value": "604"
								},
								{
									"key": "x-request-id",
									"value": "61db95e9-9332-4e02-9a98-6dc0f8ee24ed"
								},
								{
									"key": "etag",
									"value": "W/\"17d-n1qcaP5Kaxx/84ngp4sPIlH7hN8\""
								},
								{
									"key": "x-do-app-origin",
									"value": "ca0a640a-2844-46d6-9236-9b5ce997a682"
								},
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "x-do-orig-status",
									"value": "200"
								},
								{
									"key": "CF-Cache-Status",
									"value": "MISS"
								},
								{
									"key": "Set-Cookie",
									"value": "__cf_bm=Sckn7D3D0b2JYZYarM1AWYPx2ig6GLz28rwm4ts.uFg-1724430283-1.0.1.1-XUisBLxrGPZJCtWsBY3PxKbCOtBAfrea125DPh5AzpueNwgg1yChv7dcRR8u6f7ZhJFkYOMD1zRsRMq69g.KLw; path=/; expires=Fri, 23-Aug-24 16:54:43 GMT; domain=.ondigitalocean.app; HttpOnly; Secure; SameSite=None"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8b7c74531970b47c-DXB"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": {\n        \"user\": {\n            \"id\": \"63deee39-2fe3-452c-a25a-c9dc898bb10b\",\n            \"username\": \"Tressie_Glover5\",\n            \"name\": \"Test\",\n            \"email\": \"Karson46@gmail.com\",\n            \"phoneNumber\": null,\n            \"is2FAEnabled\": false,\n            \"role\": \"USER\",\n            \"managedById\": null,\n            \"createdAt\": \"2024-08-23T13:49:08.183Z\",\n            \"updatedAt\": \"2024-08-23T13:49:08.183Z\",\n            \"wallets\": [],\n            \"memberships\": [],\n            \"managedUsers\": [],\n            \"sharedWallets\": [],\n            \"rewards\": []\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Create Managed User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Managed User 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/managed",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"managed"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "2 - Community",
			"item": [
				{
					"name": "All Communities",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "My Communities",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/me",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// set the auth token",
									"pm.environment.set('COMMUNITY_ID', responseData.data.community.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomStreetName}}\",\n    \"description\": \"{{$randomLoremParagraph}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Community",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"UPDATED COMMUNITY NAME\",\n    \"status\": \"ACTIVE\",\n    \"isPublic\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Join Community",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/join?createWallet=true&walletName=Community Wallet X",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"join"
							],
							"query": [
								{
									"key": "createWallet",
									"value": "true"
								},
								{
									"key": "walletName",
									"value": "Community Wallet X"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Community Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}?include[events]=true&include[memberships][include][user]=true&include[achievements]=true",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}"
							],
							"query": [
								{
									"key": "include[events]",
									"value": "true"
								},
								{
									"key": "include[memberships][include][user]",
									"value": "true"
								},
								{
									"key": "include[achievements]",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issue Community Points",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"walletId\": \"{{WALLET_ID}}\",\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"amount\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/issue-points",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"issue-points"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "3 - Wallets",
			"item": [
				{
					"name": "My Wallets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('WALLET_ID', responseData.data.wallets[0].id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/wallets",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Wallet Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionType\": {\n        \"in\": [\"PAYMENT\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID}}/transactions?transactionType[in][]=REWARD&transactionType[in][]=PAYMENT",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID}}",
								"transactions"
							],
							"query": [
								{
									"key": "transactionType[in][]",
									"value": "REWARD"
								},
								{
									"key": "transactionType[in][]",
									"value": "PAYMENT"
								},
								{
									"key": "status",
									"value": "PENDING",
									"disabled": true
								},
								{
									"key": "transactionSubtype",
									"value": "POINTS",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Share Wallet",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID}}/share",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID}}",
								"share"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Placeholder Transaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 62.45,\n    \"transactionType\": \"PAYMENT\",\n    \"transactionSubtype\": \"BALANCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID}}/transactions/placeholder",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID}}",
								"transactions",
								"placeholder"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "4 - Payments",
			"item": [
				{
					"name": "Create Payment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"senderWalletId\": \"dc0c8704-7725-4b3d-9e8e-7a68ecd85fcd\",\n    \"receiverWalletId\": \"8d0b9870-c82c-4752-b25d-88b6422cca31\",\n    \"amount\": 0.01,\n    \"communityId\": \"815ed345-fd3a-4fc5-8ca0-258ac53cac3c\",\n    \"description\": \"test payment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/payments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"payments",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "5 - Events & Event Logs",
			"item": [
				{
					"name": "Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('EVENT_ID', responseData.data.event.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"name\": \"Test Event {{$randomAlphaNumeric}}\",\n    \"tag\": \"event_{{$randomInt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/events/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"events",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event Log",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"eventId\": \"{{EVENT_ID}}\",\n    \"userId\": \"{{USER_ID}}\",\n    \"type\": \"COMMUNITY\",\n    \"value\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/events/log",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"events",
								"log"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6 - Achievements & Rewards",
			"item": [
				{
					"name": "Create Achievement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('ACHIEVEMENT_ID', responseData.data.achievement.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"name\": \"Test Achievement {{$randomAlphaNumeric}}\",\n    \"conditionEventId\": \"{{EVENT_ID}}\",\n    \"conditionEventValue\": 10,\n    \"conditionEventComparisonType\": \"GREATER_THAN_OR_EQUAL\",\n    \"conditionEventAggregateType\": \"COUNT\",\n    \"rewardAmount\": 77\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/achievements/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"achievements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Issue Achievement Reward",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('REWARD_ID', responseData.data.reward.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{USER_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/achievements/{{ACHIEVEMENT_ID}}/rewards/issue",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"achievements",
								"{{ACHIEVEMENT_ID}}",
								"rewards",
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Claim Reward",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rewardId\": \"{{REWARD_ID}}\",\n    \"walletId\": \"{{WALLET_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/achievements/{{ACHIEVEMENT_ID}}/rewards/claim",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"achievements",
								"{{ACHIEVEMENT_ID}}",
								"rewards",
								"claim"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "99 - Test Runner",
			"item": [
				{
					"name": "User 1 registers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Response should include a token', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('token')",
									"})",
									"",
									"// set the auth token",
									"pm.environment.set('TOKEN_1', responseData.data.token);",
									"",
									"// set the email and password",
									"pm.environment.set('EMAIL_1', requestData.email);",
									"pm.environment.set('PASSWORD_1', requestData.password);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"username\": \"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 gets own info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('USER_ID_1', responseData.data.user.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/me",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"me"
							],
							"query": [
								{
									"key": "include",
									"value": "{\"wallets\": true, \"memberships\": true}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 registers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Response should include a token', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('token')",
									"})",
									"",
									"// set the auth token",
									"pm.environment.set('TOKEN_2', responseData.data.token);",
									"",
									"// set the email and password",
									"pm.environment.set('EMAIL_2', requestData.email);",
									"pm.environment.set('PASSWORD_2', requestData.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"username\": \"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 gets own info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('USER_ID_2', responseData.data.user.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/me",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"me"
							],
							"query": [
								{
									"key": "include",
									"value": "{\"wallets\": true, \"memberships\": true}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 creates community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response should include community details', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('community')",
									"    pm.expect(responseData.data.community).to.haveOwnProperty('id')",
									"})",
									"",
									"pm.test('Created community must have status DRAFT', () => {",
									"    const community = responseData.data.community",
									"    pm.expect(community.status).to.equal('DRAFT')",
									"})",
									"",
									"pm.test('Created community must not be public by default', () => {",
									"    const community = responseData.data.community",
									"    pm.expect(community.isPublic).to.equal(false)",
									"})",
									"",
									"// set the auth token",
									"pm.environment.set('COMMUNITY_ID', responseData.data.community.id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomStreetName}}\",\n    \"description\": \"{{$randomLoremParagraph}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 activates community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response should include community details', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('community')",
									"    pm.expect(responseData.data.community).to.haveOwnProperty('id')",
									"})",
									"",
									"pm.test('Community status must be changed to ACTIVE', () => {",
									"    const community = responseData.data.community",
									"    pm.expect(community.status).to.equal('ACTIVE')",
									"})",
									"",
									"pm.test('Community isPublic must be set to true', () => {",
									"    const community = responseData.data.community",
									"    pm.expect(community.isPublic).to.equal(true)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"UPDATED COMMUNITY NAME\",\n    \"status\": \"ACTIVE\",\n    \"isPublic\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 joins community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response should include membership details', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('membership')",
									"    pm.expect(responseData.data.membership).to.haveOwnProperty('id')",
									"",
									"    const communityId = pm.environment.get('COMMUNITY_ID')",
									"    pm.expect(responseData.data.membership.communityId).to.equal(communityId)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/join?createWallet=true&walletName=Community Wallet X",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"join"
							],
							"query": [
								{
									"key": "createWallet",
									"value": "true"
								},
								{
									"key": "walletName",
									"value": "Community Wallet X"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 joins community again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Request must be rejected', () => {",
									"    pm.expect(pm.response.code).to.equal(500)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/join?createWallet=true&walletName=Community Wallet X",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"join"
							],
							"query": [
								{
									"key": "createWallet",
									"value": "true"
								},
								{
									"key": "walletName",
									"value": "Community Wallet X"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 joins community",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response should include membership details', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('membership')",
									"    pm.expect(responseData.data.membership).to.haveOwnProperty('id')",
									"",
									"    const communityId = pm.environment.get('COMMUNITY_ID')",
									"    pm.expect(responseData.data.membership.communityId).to.equal(communityId)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/join?createWallet=true&walletName=Community Wallet X",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"join"
							],
							"query": [
								{
									"key": "createWallet",
									"value": "true"
								},
								{
									"key": "walletName",
									"value": "Community Wallet X"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 views wallets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const communityId = pm.environment.get('COMMUNITY_ID')",
									"",
									"pm.test('Response must contain at least one wallet', () => {",
									"    pm.expect(responseData.data.wallets.length).to.be.above(0);",
									"})",
									"",
									"pm.test('Response must contain a wallet for the community created', () => {",
									"    const found = responseData.data.wallets",
									"        .find((wallet) => wallet.communityId === communityId)",
									"    ",
									"    pm.expect(found).to.haveOwnProperty('id')",
									"    pm.environment.set('WALLET_ID_1', found.id)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/wallets",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 views wallets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const communityId = pm.environment.get('COMMUNITY_ID')",
									"",
									"pm.test('Response must contain at least one wallet', () => {",
									"    pm.expect(responseData.data.wallets.length).to.be.above(0);",
									"})",
									"",
									"pm.test('Response must contain a wallet for the community created', () => {",
									"    const found = responseData.data.wallets",
									"        .find((wallet) => wallet.communityId === communityId)",
									"    ",
									"    pm.expect(found).to.haveOwnProperty('id')",
									"    pm.environment.set('WALLET_ID_2', found.id)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/wallets",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 pays User 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"senderWalletId\": \"{{WALLET_ID_1}}\",\n    \"receiverWalletId\": \"{{WALLET_ID_2}}\",\n    \"amount\": 30,\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"description\": \"test payment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/payments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"payments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 registers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test('Response should include a token', () => {",
									"    pm.expect(responseData.data).to.haveOwnProperty('token')",
									"})",
									"",
									"// set the auth token",
									"pm.environment.set('TOKEN_3', responseData.data.token);",
									"",
									"// set the email and password",
									"pm.environment.set('EMAIL_3', requestData.email);",
									"pm.environment.set('PASSWORD_3', requestData.password);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"username\": \"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/users/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 gets own info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.environment.set('USER_ID_3', responseData.data.user.id)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_3}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/me",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"me"
							],
							"query": [
								{
									"key": "include",
									"value": "{\"wallets\": true, \"memberships\": true}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 shares wallet w. User 3",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"recipientId\": \"{{USER_ID_3}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID_1}}/share",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID_1}}",
								"share"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 views wallets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const communityId = pm.environment.get('COMMUNITY_ID')",
									"",
									"pm.test('Response must contain at least one wallet', () => {",
									"    pm.expect(responseData.data.wallets.length).to.be.above(0);",
									"})",
									"",
									"pm.test('Response must contain a wallet for the community created', () => {",
									"    const found = responseData.data.wallets",
									"        .find((wallet) => wallet.communityId === communityId)",
									"    ",
									"    pm.expect(found).to.haveOwnProperty('id')",
									"    pm.environment.set('WALLET_ID_3', found.id)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_3}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/wallets?includeShared=true",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets"
							],
							"query": [
								{
									"key": "includeShared",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 awards User 2 points",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"walletId\": \"{{WALLET_ID_2}}\",\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"amount\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/communities/{{COMMUNITY_ID}}/issue-points",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"communities",
								"{{COMMUNITY_ID}}",
								"issue-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 queries wallet transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response must contain exactly one transaction', () => {",
									"    pm.expect(responseData.data.transactions.length).to.be.above(0);",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID_2}}/transactions?transactionType[in][]=REWARD&transactionType[in][]=PAYMENT",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID_2}}",
								"transactions"
							],
							"query": [
								{
									"key": "transactionType[in][]",
									"value": "REWARD"
								},
								{
									"key": "transactionType[in][]",
									"value": "PAYMENT"
								},
								{
									"key": "status",
									"value": "PENDING",
									"disabled": true
								},
								{
									"key": "transactionSubtype",
									"value": "POINTS",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 pays via shared wallet",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"senderWalletId\": \"{{WALLET_ID_3}}\",\n    \"receiverWalletId\": \"{{WALLET_ID_2}}\",\n    \"amount\": 10,\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"description\": \"payment from shared wallet\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/payments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"payments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 3 attempts over-paying",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Request must be rejected', () => {",
									"    pm.expect(pm.response.code).to.equal(500)",
									"    pm.expect(responseData.error.code).to.equal(302)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"senderWalletId\": \"{{WALLET_ID_3}}\",\n    \"receiverWalletId\": \"{{WALLET_ID_2}}\",\n    \"amount\": 100000,\n    \"communityId\": \"{{COMMUNITY_ID}}\",\n    \"description\": \"payment from shared wallet\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/payments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"payments",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User 1 creates placeholder transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response must contains a transaction with STATUS = PLACEHOLDER', () => {",
									"    pm.expect(responseData.data.transaction).to.haveOwnProperty('id')",
									"    pm.expect(responseData.data.transaction.status).to.equal('PLACEHOLDER')",
									"    pm.environment.set('PLACEHOLDER_TRANSACTION_ID', responseData.data.transaction.id)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 62.45,\n    \"transactionType\": \"PAYMENT\",\n    \"transactionSubtype\": \"BALANCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/wallets/{{WALLET_ID_1}}/transactions/placeholder",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"wallets",
								"{{WALLET_ID_1}}",
								"transactions",
								"placeholder"
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 pays placeholder transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test('Response must contains a transaction with STATUS = COMPLETED', () => {",
									"    pm.expect(responseData.data.transaction).to.haveOwnProperty('id')",
									"    pm.expect(responseData.data.transaction.status).to.equal('COMPLETED')",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN_2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"senderWalletId\": \"{{WALLET_ID_2}}\",\n    \"receiverWalletId\": \"{{WALLET_ID_1}}\",\n    \"amount\": 10,\n    \"transactionId\": \"{{PLACEHOLDER_TRANSACTION_ID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/payments/",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"payments",
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/health-check",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"health-check"
					]
				}
			},
			"response": []
		}
	]
}