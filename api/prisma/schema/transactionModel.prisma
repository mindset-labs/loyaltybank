model Transaction {
    id          String   @id @default(uuid())
    amount      Float
    transactionType TransactionType
    transactionSubtype TransactionSubtype
    transactionStatus TransactionStatus @default(PENDING)
    description String?
    senderId    String
    receiverId  String
    senderWalletId String
    receiverWalletId String
    communityId String?
    eventId     String?
    metadata    Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
  
    // relationships
    sender User @relation("sender", fields: [senderId], references: [id])
    receiver User @relation("receiver", fields: [receiverId], references: [id])
    community Community? @relation(fields: [communityId], references: [id])
    senderWallet Wallet @relation("senderWallet", fields: [senderWalletId], references: [id])
    receiverWallet Wallet @relation("receiverWallet", fields: [receiverWalletId], references: [id])
    event Event? @relation(fields: [eventId], references: [id])
}

enum TransactionType {
    DEPOSIT
    WITHDRAW
    TRANSFER
    REWARD
}

enum TransactionSubtype {
    BANK_TRANSFER
    CASH
    BALANCE
    CRYPTO
    POINTS
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
}
